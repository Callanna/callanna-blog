{"remainingRequest":"/Users/pro/Documents/WebWork/GitHub/iBlog-master/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/pro/Documents/WebWork/GitHub/iBlog-master/.nuxt/auth/schemes/local.js","dependencies":[{"path":"/Users/pro/Documents/WebWork/GitHub/iBlog-master/.nuxt/auth/schemes/local.js","mtime":1597482623749},{"path":"/Users/pro/Documents/WebWork/GitHub/iBlog-master/node_modules/cache-loader/dist/cjs.js","mtime":1583743859870},{"path":"/Users/pro/Documents/WebWork/GitHub/iBlog-master/node_modules/babel-loader/lib/index.js","mtime":1578715241550}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/pro/Documents/WebWork/GitHub/iBlog-master/.nuxt/auth/schemes/local.js"],"names":["LocalScheme","auth","options","$auth","name","_name","Object","assign","DEFAULTS","token","globalToken","ctx","app","$axios","setHeader","tokenName","tokenRequired","syncToken","_setToken","fetchUserOnce","endpoint","endpoints","login","_logoutLocally","request","result","tokenType","setToken","fetchUser","tokenValue","getToken","user","setUser","requestWith","logout","catch","_clearToken","reset"],"mappings":"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","sourcesContent":["export default class LocalScheme {\n  constructor (auth, options) {\n    this.$auth = auth\n    this.name = options._name\n\n    this.options = Object.assign({}, DEFAULTS, options)\n  }\n\n  _setToken (token) {\n    if (this.options.globalToken) {\n      // Set Authorization token for all axios requests\n      this.$auth.ctx.app.$axios.setHeader(this.options.tokenName, token)\n    }\n  }\n\n  _clearToken () {\n    if (this.options.globalToken) {\n      // Clear Authorization token for all axios requests\n      this.$auth.ctx.app.$axios.setHeader(this.options.tokenName, false)\n    }\n  }\n\n  mounted () {\n    if (this.options.tokenRequired) {\n      const token = this.$auth.syncToken(this.name)\n      this._setToken(token)\n    }\n\n    return this.$auth.fetchUserOnce()\n  }\n\n  async login (endpoint) {\n    if (!this.options.endpoints.login) {\n      return\n    }\n\n    // Ditch any leftover local tokens before attempting to log in\n    await this._logoutLocally()\n\n    const result = await this.$auth.request(\n      endpoint,\n      this.options.endpoints.login\n    )\n\n    if (this.options.tokenRequired) {\n      const token = this.options.tokenType\n        ? this.options.tokenType + ' ' + result\n        : result\n\n      this.$auth.setToken(this.name, token)\n      this._setToken(token)\n    }\n\n    return this.fetchUser()\n  }\n\n  async setUserToken (tokenValue) {\n    // Ditch any leftover local tokens before attempting to log in\n    await this._logoutLocally()\n\n    if (this.options.tokenRequired) {\n      const token = this.options.tokenType\n        ? this.options.tokenType + ' ' + tokenValue\n        : tokenValue\n\n      this.$auth.setToken(this.name, token)\n      this._setToken(token)\n    }\n\n    return this.fetchUser()\n  }\n\n  async fetchUser (endpoint) {\n    // Token is required but not available\n    if (this.options.tokenRequired && !this.$auth.getToken(this.name)) {\n      return\n    }\n\n    // User endpoint is disabled.\n    if (!this.options.endpoints.user) {\n      this.$auth.setUser({})\n      return\n    }\n\n    // Try to fetch user and then set\n    const user = await this.$auth.requestWith(\n      this.name,\n      endpoint,\n      this.options.endpoints.user\n    )\n    this.$auth.setUser(user)\n  }\n\n  async logout (endpoint) {\n    // Only connect to logout endpoint if it's configured\n    if (this.options.endpoints.logout) {\n      await this.$auth\n        .requestWith(this.name, endpoint, this.options.endpoints.logout)\n        .catch(() => { })\n    }\n\n    // But logout locally regardless\n    return this._logoutLocally()\n  }\n\n  async _logoutLocally () {\n    if (this.options.tokenRequired) {\n      this._clearToken()\n    }\n\n    return this.$auth.reset()\n  }\n}\n\nconst DEFAULTS = {\n  tokenRequired: true,\n  tokenType: 'Bearer',\n  globalToken: true,\n  tokenName: 'Authorization'\n}\n"]}]}