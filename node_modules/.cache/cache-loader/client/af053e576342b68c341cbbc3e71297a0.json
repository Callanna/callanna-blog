{"remainingRequest":"/Users/pro/Documents/WebWork/GitHub/iBlog-master/node_modules/babel-loader/lib/index.js??ref--2-1!/Users/pro/Documents/WebWork/GitHub/iBlog-master/.nuxt/index.js","dependencies":[{"path":"/Users/pro/Documents/WebWork/GitHub/iBlog-master/.nuxt/index.js","mtime":1597976391448},{"path":"/Users/pro/Documents/WebWork/GitHub/iBlog-master/node_modules/cache-loader/dist/cjs.js","mtime":1583743859870},{"path":"/Users/pro/Documents/WebWork/GitHub/iBlog-master/node_modules/babel-loader/lib/index.js","mtime":1578715241550}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}